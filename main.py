# -*- coding: utf-8 -*-
"""Trabalho BigData Modificado.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16mt7Um9R93L9AJZkAU0UQ8eueaqZeQId
"""



import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from google import genai
from markdown import markdown
from xhtml2pdf import pisa
import os
from dotenv import load_dotenv, find_dotenv
import plotly.express as px



# Carrega as variáveis de ambiente do .env (ex: OPENAI_API_KEY)
load_dotenv(find_dotenv())

CAMINHO = './sample_data/datatran2022.csv'

df_sinistro = pd.read_csv(CAMINHO, encoding="Windows-1252", sep=";")
#df_obitos = pd.read_csv('/content/drive/MyDrive/Sinistro/2023.csv', encoding="Windows-1252", sep=";")

df_sinistro.info()

df_sinistro.head()

if df_sinistro['longitude'].dtype == 'object' and df_sinistro['latitude'].dtype == 'object':
  df_sinistro['longitude'] = df_sinistro['longitude'].str.replace(',', '.').astype(float)
  df_sinistro['latitude'] = df_sinistro['latitude'].str.replace(',', '.').astype(float)

grafico = px.density_mapbox(df_sinistro, lon="longitude", lat="latitude",
                     z='mortos', mapbox_style="open-street-map", zoom=5, radius=4)
grafico.show()

# Quantidade de acidentes mais frequentes por tipo de pista

qntd_acidente_por_pista = df_sinistro['tipo_pista'].value_counts()
qntd_acidente_por_pista.plot(kind='bar', title='Acidente por pista')
plt.xlabel('Pista')
plt.ylabel('Quantidade')
plt.show()

acidentes_por_pista_e_causa = df_sinistro.groupby(['tipo_pista', 'causa_acidente'])['causa_acidente'].value_counts().sort_values(ascending=False).head(10).unstack(level=0)
acidentes_por_pista_e_causa.plot(kind='bar', title='Acidentes por pista e causa')
plt.xlabel('Causa do Acidente')
plt.ylabel('Quantidade')
plt.legend(title='Tipo de pista')

plt.show()

menores_acidentes_por_pista_e_causa = df_sinistro.groupby(['tipo_pista', 'causa_acidente'])['causa_acidente'].value_counts().sort_values(ascending=True).head(10).unstack(level=0)
prompt = f"""
CRIAR UMA IMAGEM DE POST DO INSTAGRAM COM BASE NESSE JSON:
{menores_acidentes_por_pista_e_causa.to_json()}
"""
menores_acidentes_por_pista_e_causa.plot(kind='bar', title='Acidentes por pista e causa')
plt.xlabel('Causa do Acidente')
plt.ylabel('Quantidade')
plt.legend(title='Tipo de pista')

print(prompt)

plt.show()

num_mortos_por_causa_de_acidente = df_sinistro.groupby('causa_acidente')['mortos'].sum().sort_values(ascending=False).head(10)
num_mortos_por_causa_de_acidente.plot(kind='bar', title='Numero de mortos por causa de acidente')
plt.xlabel('Causa do acidente')
plt.ylabel('Numero de mortos')
plt.show()

num_feridos_graves_por_causa_de_acidente = df_sinistro.groupby('causa_acidente')['feridos_graves'].sum().sort_values(ascending=False).head(10)
prompt = f"""
CRIAR UMA IMAGEM DE POST DO INSTAGRAM COM BASE NESSE JSON:
{num_feridos_graves_por_causa_de_acidente.to_json()}

DEVE SEGUIR ESSAS INSTRUÇÕES:
- DEIXE EM UMA LINGUAGEM ACESSÍVEL PARA O LEITOR.
- TENHA UMA COMUNICAÇÃO DIRETA
- DEVE SER ALINHADO
- DEVE SER COMUNICATIVO
- DEVE SER INFORMATIVO
- DEVE SER MODERNO
- DEVE FALAR COM O PÚBLICO IDEAL NO QUAL O TEMA 'TRÂNSITO' PERTENCE
- DEVE ALERTAR O LEITOR

OBSERVAÇÕES:
- A CHAVE DO JSON É A CAUSA DO ACIDENTE
- O VALOR É O NÚMERO DE FERIDOS GRAVES
"""
num_mortos_por_causa_de_acidente.plot(kind='bar', title='Numero de mortos por causa de acidente')
plt.xlabel('Causa do acidente')
plt.ylabel('Numero de pessoas feridas gravemente')
print(prompt)
plt.show()

morte_por_condicao_climatica = df_sinistro.groupby(
    ['condicao_metereologica','uf']
)['mortos'].sum().sort_values(ascending=False).unstack(level=0)
morte_por_condicao_climatica.plot(kind='bar', title='Numero de mortos por causa de acidente')
plt.xlabel('UF')
plt.ylabel('Numero de mortos')

plt.legend(title='Condição metereológica')
plt.show()

acidente_por_horario = df_sinistro[['horario', 'data_inversa', 'tipo_acidente', 'dia_semana', 'causa_acidente']].copy()
acidente_por_horario['data'] = pd.to_datetime(acidente_por_horario['data_inversa'] + ' ' + acidente_por_horario['horario'])
acidente_por_horario['horario'] = acidente_por_horario['data'].dt.hour

acidente_por_horario_agrupado = acidente_por_horario.value_counts().groupby(['horario']).sum().to_frame().sort_values(by='horario')
acidente_por_horario_agrupado.plot(kind='bar', title='Numero de acidentes por horario')
plt.xlabel('Horario')
plt.ylabel('Numero de acidentes')
plt.show()

mortos_por_horario = df_sinistro[['horario', 'data_inversa', 'mortos', 'condicao_metereologica']].copy()

# Criar coluna de data/hora combinada
mortos_por_horario['data'] = pd.to_datetime(mortos_por_horario['data_inversa'] + ' ' + mortos_por_horario['horario'])
mortos_por_horario['horario'] = mortos_por_horario['data'].dt.hour

# Agrupar por condição meteorológica e horário, somando os mortos
mortos_agrupados = mortos_por_horario.groupby(
    ['condicao_metereologica', 'horario']
)['mortos'].sum().unstack(level=0)

# Plotar gráfico de barras
plt.figure(figsize=(12, 6))
mortos_agrupados.plot(kind='bar', title='Número de mortos por horário e condição meteorológica')
plt.xlabel('Horário')
plt.ylabel('Número de mortos')
plt.xticks(rotation=45)
plt.legend(title='Condição Meteorológica')

plt.show()


gemini = genai.Client(api_key=os.getenv("GEMINI_API_KEY"))
prompt_inicial = open("./prompt.txt", "r", encoding="utf-8").read()


roteiro_de_conteudo = gemini.models.generate_content(
    model='gemini-2.0-flash',
    contents=prompt_inicial.format(
        dados=df_sinistro.to_csv(),
        observacoes='os dados segue esse padrão: {tipo_pista:{tipo_acidente: quantidade}}'
    )
).text

html = markdown(roteiro_de_conteudo)

with open("./Roteiro Criado.pdf", "w+b") as result_file:
    # convert HTML to PDF
    pisa_status = pisa.CreatePDF(
        html,       # page data
        dest=result_file,  # destination file
    )

    # Check for errors
    if pisa_status.err:
        print("An error occurred!")